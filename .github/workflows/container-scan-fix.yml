name: Container Scan & Auto-Fix

on:
  push:
    branches:
      - main # Trigger on pushes to main
  pull_request:
    branches:
      - main # Trigger on PRs targeting main

jobs:
  trivy-auto-fix:
    runs-on: ubuntu-latest
    permissions:
      contents: write # Required to push changes and create PRs
      pull-requests: write # Required to create PRs
      actions: write # ADDED: Required for publishing artifacts
      security-events: write # ADDED: Required to upload SARIF reports to GitHub Security tab

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Needed for git operations later

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install Trivy
        run: |
          sudo apt-get update
          sudo apt-get install -y wget apt-transport-https gnupg
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install -y trivy
          # ADDED: Verify Trivy installation
          trivy --version

      # ADDED: Install GitHub CLI for PR creation if not already present in runner
      - name: Install GitHub CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y gh
          gh --version

      - name: Install Python dependencies
        run: pip install python-dotenv requests # ADDED: 'requests' for Slack notification

      - name: Build Docker Image (Original)
        id: build_original
        run: |
          docker build -t myapp:latest .
          echo "IMAGE_ID=myapp:latest" >> $GITHUB_OUTPUT

      - name: Run Trivy Scan (Original)
        id: trivy_scan_original
        run: |
          trivy image --format json --output trivy-report-original.json ${{ steps.build_original.outputs.IMAGE_ID }}
          echo "TRIVY_REPORT_PATH=trivy-report-original.json" >> $GITHUB_OUTPUT
          
          # ADDED: Generate SARIF and TXT reports
          trivy image --format sarif --output trivy-report.sarif ${{ steps.build_original.outputs.IMAGE_ID }}
          trivy image --format table --output trivy-report.txt ${{ steps.build_original.outputs.IMAGE_ID }}
          echo "TRIVY_SARIF_REPORT_PATH=trivy-report.sarif" >> $GITHUB_OUTPUT
          echo "TRIVY_TXT_REPORT_PATH=trivy-report.txt" >> $GITHUB_OUTPUT

        continue-on-error: true # Allow subsequent steps to run even if vulnerabilities are found

      # ADDED: Upload original scan JSON report as artifact
      - name: Upload Trivy JSON Report (Original)
        uses: actions/upload-artifact@v3
        with:
          name: trivy-json-report-original
          path: ${{ steps.trivy_scan_original.outputs.TRIVY_REPORT_PATH }}
          retention-days: 5

      # ADDED: Upload original scan Text report as artifact
      - name: Upload Trivy Text Report (Original)
        uses: actions/upload-artifact@v3
        with:
          name: trivy-text-report-original
          path: ${{ steps.trivy_scan_original.outputs.TRIVY_TXT_REPORT_PATH }}
          retention-days: 5
      
      # ADDED: Upload original scan SARIF report to GitHub Security tab
      - name: Upload Trivy SARIF Report to GitHub Security Tab (Original)
        if: always() # Always upload, even if scan fails
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: ${{ steps.trivy_scan_original.outputs.TRIVY_SARIF_REPORT_PATH }}


      - name: Parse Trivy Report & Identify Fixes
        id: parse_report
        # ADDED: Pass the mode to the Python script. If your parse_trivy_report.py
        # doesn't use it, you'd adapt the script accordingly.
        # Assuming parse_trivy_report.py can also output a summary and 'vulnerabilities_found'
        run: |
          MODE="check" # Default for PRs
          if [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == "refs/heads/main" ]]; then
            MODE="autofix" # Enable autofix on push to main (logic in apply_fixes or combined script)
          fi
          echo "Running parsing in mode: $MODE"
          python3 scripts/parse_trivy_report.py \
            ${{ steps.trivy_scan_original.outputs.TRIVY_REPORT_PATH }} \
            $MODE # Pass mode if your script needs it to decide behavior or outputs
          # The parse_trivy_report.py script will create 'vulnerabilities.json' if fixes are needed
          # ADDED: Capture outputs from parse_report script for Slack
          # Assuming parse_trivy_report.py sets 'critical_high_summary' and 'vulnerabilities_found' outputs
          # via '::set-output name=...' (like the trivy_autofix.py from previous example)
        continue-on-error: true # Continue if no vulnerabilities found

      - name: Apply Fixes to Dockerfile
        id: apply_fixes
        # ADDED: Conditional execution based on event type. Only attempt to apply fixes on 'push' to 'main'.
        # For 'pull_request', this step will be skipped, ensuring no auto-commits on PR branches.
        if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
        run: |
          python3 scripts/apply_fixes.py Dockerfile vulnerabilities.json
          # The apply_fixes.py script will update 'Dockerfile' if changes are applied
          if [ -f "Dockerfile.fixed" ]; then
            mv Dockerfile.fixed Dockerfile
            echo "DOCKERFILE_MODIFIED=true" >> $GITHUB_OUTPUT
          else
            echo "DOCKERFILE_MODIFIED=false" >> $GITHUB_OUTPUT
          fi
        # ADDED: Ensure output is set even if not run to avoid 'expression error' later
        else:
          echo "DOCKERFILE_MODIFIED=false" >> $GITHUB_OUTPUT


      - name: Check for Dockerfile Changes
        id: git_status
        run: |
          # The original check. If apply_fixes.py didn't run, DOCKERFILE_MODIFIED might be false.
          # This check still ensures we only proceed with git ops if there's an actual diff.
          if git diff --exit-code --quiet Dockerfile; then
            echo "has_changes=false" >> $GITHUB_OUTPUT # Corrected output format for GITHUB_OUTPUT
          else
            echo "has_changes=true" >> $GITHUB_OUTPUT # Corrected output format for GITHUB_OUTPUT
          fi

      - name: Commit & Create Pull Request
        # Original condition for commit/PR. This implicitly handles 'push' to 'main'
        # because 'apply_fixes' is conditional.
        if: steps.git_status.outputs.has_changes == 'true'
        id: commit_and_pr # ADDED: ID for referencing outputs in Slack message
        run: |
          BRANCH_NAME="fix/vulnerabilities-$(date +%Y%m%d%H%M%S)"
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git checkout -b $BRANCH_NAME
          git add Dockerfile # Add the potentially modified Dockerfile
          git commit -m " chore(deps): Automate vulnerability fixes"
          git push origin $BRANCH_NAME

          PR_TITLE="Automated: Fix container vulnerabilities" # ADDED: Store for output
          PR_BODY="Automated vulnerability remediation detected and applied to Dockerfile.
          
          **Original Trivy Report (summary of Critical/High):**
          $(cat trivy-report-original.json | python3 -c 'import json, sys; data=json.load(sys.stdin); print("\n".join([f"- {v["VulnerabilityID"]} ({v["Severity"]}) in {v["PkgName"]}:{v["InstalledVersion"]} (Fix: {v.get("FixedVersion", "N/A")})" for r in data.get("Results", []) for v in r.get("Vulnerabilities", []) if v["Severity"] in ["CRITICAL", "HIGH"] and v.get("FixedVersion")]))')
          
          This PR attempts to fix these by updating base images or packages.
          
          **Validation**: A subsequent scan on this PR branch will confirm the fixes."

          # ADDED: Check for existing PR to prevent duplicates
          EXISTING_PR=$(gh pr list --head $BRANCH_NAME --state open --json number -q '.[0].number')
          if [ -z "$EXISTING_PR" ]; then
            gh pr create --base main --head $BRANCH_NAME --title "$PR_TITLE" --body "$PR_BODY"
            echo "pr_created=true" >> $GITHUB_OUTPUT # ADDED: Output to indicate PR creation
            echo "pr_title=$PR_TITLE" >> $GITHUB_OUTPUT # ADDED: Output PR title
          else
            echo "Pull request already exists for branch $BRANCH_NAME. Skipping creation."
            echo "pr_created=false" >> $GITHUB_OUTPUT # ADDED: Output to indicate no PR creation
          fi

        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Docker Image (Fixed - for immediate validation in same run)
        # Original condition. If Dockerfile was modified (implicitly via apply_fixes)
        if: steps.git_status.outputs.has_changes == 'true' # Only if Dockerfile was modified
        id: build_fixed
        run: |
          docker build -t myapp-fixed:latest .
          echo "IMAGE_ID_FIXED=myapp-fixed:latest" >> $GITHUB_OUTPUT

      - name: Run Trivy Scan (Fixed - for immediate validation)
        # Original condition. If Dockerfile was modified
        if: steps.git_status.outputs.has_changes == 'true' # Only if Dockerfile was modified
        id: trivy_scan_fixed
        run: |
          trivy image --format json --output trivy-report-fixed.json ${{ steps.build_fixed.outputs.IMAGE_ID_FIXED }}
          echo "TRIVY_REPORT_FIXED_PATH=trivy-report-fixed.json" >> $GITHUB_OUTPUT
          # ADDED: Generate fixed image text report
          trivy image --format table --output trivy-report-fixed.txt ${{ steps.build_fixed.outputs.IMAGE_ID_FIXED }}
          echo "TRIVY_FIXED_TXT_REPORT_PATH=trivy-report-fixed.txt" >> $GITHUB_OUTPUT
        continue-on-error: true # Allow subsequent steps

      # ADDED: Upload fixed image JSON report as artifact
      - name: Upload Trivy Fixed Image JSON Report
        if: ${{ steps.git_status.outputs.has_changes == 'true' }}
        uses: actions/upload-artifact@v3
        with:
          name: trivy-fixed-image-json-report
          path: ${{ steps.trivy_scan_fixed.outputs.TRIVY_REPORT_FIXED_PATH }}
          retention-days: 5
      
      # ADDED: Upload fixed image Text report as artifact
      - name: Upload Trivy Fixed Image Text Report
        if: ${{ steps.git_status.outputs.has_changes == 'true' }}
        uses: actions/upload-artifact@v3
        with:
          name: trivy-fixed-image-text-report
          path: ${{ steps.trivy_scan_fixed.outputs.TRIVY_FIXED_TXT_REPORT_PATH }}
          retention-days: 5

      # ADDED: Slack Notification Step
      - name: Notify Slack
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }} # Set this as a repository secret
          SLACK_CHANNEL: '#devsecops-alerts' # Or a channel specific to this repo/team
          SLACK_USERNAME: 'Trivy Auto-Fix Bot'
          SLACK_ICON_EMOJI: ':docker:'
          SLACK_COLOR: ${{ job.status == 'success' && 'good' || job.status == 'failure' && 'danger' || 'warning' }}
          SLACK_MESSAGE: |
            *GitHub Action Run:* <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|${{ github.workflow }} #${{ github.run_number }}>
            *Repository:* `${{ github.repository }}`
            *Event:* `${{ github.event_name }}` on branch `${{ github.ref_name }}`
            
            ${{ 
              github.event_name == 'pull_request' && format('💡 *New Pull Request Scan:* PR #{0} - {1}\nStatus: {2}', github.event.pull_request.number, github.event.pull_request.title, job.status) ||
              github.event_name == 'push' && format('🚀 *Push to Main Branch Scan:* Commit: {0}\nStatus: {1}', github.sha, job.status)
            }}

            # You'll need to adapt the next line if 'parse_report' doesn't output 'critical_high_summary'
            # or if 'vulnerabilities_found' is not set. The python script from my previous response does this.
            ${{ steps.parse_report.outputs.vulnerabilities_found == 'true' && format('🚨 *Vulnerabilities Found:* \n{0}', steps.parse_report.outputs.critical_high_summary) || '✅ No Critical/High vulnerabilities found.' }}
            
            # Message for auto-fix PR creation
            ${{ steps.git_status.outputs.has_changes == 'true' && steps.commit_and_pr.outputs.pr_created == 'true' && format('⚙️ Automated fixes attempted and PR created: *{0}*', steps.commit_and_pr.outputs.pr_title) || '' }}
            ${{ steps.git_status.outputs.has_changes == 'true' && steps.commit_and_pr.outputs.pr_created == 'false' && format('⚠️ Automated fixes attempted but PR not created (already exists or error).') || '' }}


            # Validation status for fixed image
            ${{ steps.trivy_scan_fixed.outcome == 'success' && steps.git_status.outputs.has_changes == 'true' && format('✨ Fixed Image Scan Status: Successful. Check artifacts for report.') || '' }}
            ${{ steps.trivy_scan_fixed.outcome == 'failure' && steps.git_status.outputs.has_changes == 'true' && format('⚠️ Fixed Image Scan Status: Failed or still contains vulnerabilities in fixed image. Check artifacts.') || '' }}
            
            *View full reports:*
            - Trivy JSON (Original): <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts/trivy-json-report-original|Download JSON>
            - Trivy Text (Original): <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts/trivy-text-report-original|Download Text>
            ${{ steps.git_status.outputs.has_changes == 'true' && format('- Fixed Image JSON: <{0}/{1}/actions/runs/{2}/artifacts/trivy-fixed-image-json-report|Download Fixed Image JSON>', github.server_url, github.repository, github.run_id) || '' }}
            ${{ steps.git_status.outputs.has_changes == 'true' && format('- Fixed Image Text: <{0}/{1}/actions/runs/{2}/artifacts/trivy-fixed-image-text-report|Download Fixed Image Text>', github.server_url, github.repository, github.run_id) || '' }}
