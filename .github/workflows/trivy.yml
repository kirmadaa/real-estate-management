# .github/workflows/trivy-remediation-v2.yml
name: TaskApi - E1 → E2 US Hydra with Trivy Remediation v2

on:
  workflow_dispatch:

jobs:
  set_env:
    name: 🛠 Set Variables
    runs-on: ubuntu-latest
    outputs:
      image_name: ${{ steps.setvars.outputs.image_name }}
      image_tag: ${{ steps.setvars.outputs.image_tag }}
      checkout_branch: ${{ steps.setvars.outputs.checkout_branch }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set environment variables
        id: setvars
        run: |
          echo "image_name=${{ github.repository }}" >> $GITHUB_OUTPUT
          echo "image_tag=${{ github.sha }}" >> $GITHUB_OUTPUT
          echo "checkout_branch=${GITHUB_REF#refs/heads/}" >> $GITHUB_OUTPUT

  ace-build:
    name: 🐳 Build and Push Docker Image
    needs: set_env
    runs-on: ubuntu-latest
    outputs:
      pushed_image: ${{ steps.push.outputs.image }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: kirmadadaa
          password: hnguhngu1

      - name: Build Docker Image
        id: build
        run: |
          img="kiramdadaa:${{ needs.set_env.outputs.image_tag }}"
          # Fixed: Use -f flag to specify Dockerfile location, removed duplicate -t
          docker build -f frontend/Dockerfile -t "$img" frontend/
          docker tag "$img" "${{ needs.set_env.outputs.image_name }}:latest"
          echo "Built $img and tagged as latest"

      - name: Push Docker Image
        id: push
        run: |
          img="kiradadaa:${{ needs.set_env.outputs.image_tag }}"
          docker push "$img"
          docker push "kirmadadaa:latest"
          echo "image=${img}" >> $GITHUB_OUTPUT

  trivy-scan:
    name: 🔍 Trivy Scan
    needs: ace-build
    runs-on: ubuntu-latest
    outputs:
      vulns: ${{ steps.parse.outputs.vulns }}
    env:
      IMAGE: ${{ needs.ace-build.outputs.pushed_image }}
      SCAN_REPORT: trivy-report.json
    steps:
      - name: Install Trivy
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sudo sh -s -- -b /usr/local/bin v0.40.6

      - name: Run Trivy on published image
        run: |
          echo "Scanning $IMAGE"
          trivy image --format json --output $SCAN_REPORT $IMAGE || true

      - name: Parse vulnerability count
        id: parse
        run: |
          count=$(jq '[.Results[].Vulnerabilities[]?] | length' $SCAN_REPORT)
          echo "vulns=$count" >> $GITHUB_OUTPUT

      - name: Upload Trivy Report
        uses: actions/upload-artifact@v3
        with:
          name: trivy-report
          path: $SCAN_REPORT

  # remediation:
  #   name: 🔧 Automated Remediation
  #   needs: [set_env, trivy-scan]
  #   if: needs.trivy-scan.outputs.vulns != '0'
  #   runs-on: ubuntu-latest
  #   env:
  #     BRANCH: ${{ needs.set_env.outputs.checkout_branch }}
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4
  #       with:
  #         ref: ${{ env.BRANCH }}

  #     - name: Run remediation script
  #       run: |
  #         chmod +x .github/scripts/remediate.sh
  #         ./.github/scripts/remediate.sh

  #     - name: Commit & push fixes
  #       run: |
  #         git config user.name "github-actions[bot]"
  #         git config user.email "github-actions[bot]@users.noreply.github.com"
  #         git add frontend/Dockerfile package.json requirements.txt || true
  #         git commit -m "Automated remediation fixes" || echo "No changes to commit"
  #         git push origin $BRANCH

  # ccli_hydra_e1_deployment:
  #   name: 🚀🟡 Deploy image to E1 Hydra
  #   needs: [set_env, ace-build, trivy-scan]
  #   uses: amex-eng/ace-platform-reusable-workflow/.github/workflows/deploy_to_hydra_ccli_validate.yml@main
  #   with:
  #     image_name_ccli: artifactory.aexp.com/dockerproxy/${{ needs.set_env.outputs.image_name }}
  #     sha256: ${{ needs.ace-build.outputs.pushed_image }}
  #     regions: US
  #     env: "E1"
  #     project: ${{ vars.PROJECT }}
  #     service: ${{ vars.SERVICE }}
  #     image_time_stamp: ${{ needs.set_env.outputs.image_tag }}
  #   secrets:
  #     SE_USERNAME: ${{ secrets.SE_USERNAME }}
  #     SE_PASSWORD: ${{ secrets.SE_PASSWORD }}
  #     ARTIFACTORY_USERNAME: ${{ secrets.ARTIFACTORY_USERNAME }}
  #     ARTIFACTORY_PASSWORD: ${{ secrets.ARTIFACTORY_PASSWORD }}

  # ccli_hydra_e2_deployment:
  #   name: 🚀🟠 Deploy image to E2 Hydra
  #   needs: [set_env, ace-build, trivy-scan, ccli_hydra_e1_deployment]
  #   uses: amex-eng/ace-platform-reusable-workflow/.github/workflows/deploy_to_hydra_ccli_validate.yml@main
  #   with:
  #     image_name_ccli: artifactory.aexp.com/dockerproxy/${{ needs.set_env.outputs.image_name }}
  #     sha256: ${{ needs.ace-build.outputs.pushed_image }}
  #     regions: US
  #     env: "E2"
  #     project: ${{ vars.PROJECT }}
  #     service: ${{ vars.SERVICE }}
  #     image_time_stamp: ${{ needs.set_env.outputs.image_tag }}
  #   secrets:
  #     SE_USERNAME: ${{ secrets.SE_USERNAME }}
  #     SE_PASSWORD: ${{ secrets.SE_PASSWORD }}
  #     ARTIFACTORY_USERNAME: ${{ secrets.ARTIFACTORY_USERNAME }}
  #     ARTIFACTORY_PASSWORD: ${{ secrets.ARTIFACTORY_PASSWORD }}
