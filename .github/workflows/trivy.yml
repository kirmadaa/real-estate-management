name: TaskApi - Docker Build, Push, and Security Scan

on:
  workflow_dispatch:

env:
  IMAGE_NAME: kirmadadaa/taskapi-frontend  # Ensures correct formatting

jobs:
  set_env:
    name: üõ† Set Variables
    runs-on: ubuntu-latest
    outputs:
      image_name: ${{ steps.setvars.outputs.image_name }}
      image_tag: ${{ steps.setvars.outputs.image_tag }}
      checkout_branch: ${{ steps.setvars.outputs.checkout_branch }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set environment variables
        id: setvars
        run: |
          echo "image_name=${{ env.IMAGE_NAME }}" >> $GITHUB_OUTPUT
          echo "image_tag=${GITHUB_SHA::8}" >> $GITHUB_OUTPUT  # Short SHA for readability
          echo "checkout_branch=${GITHUB_REF#refs/heads/}" >> $GITHUB_OUTPUT

  docker_build_push:
    name: üê≥ Build and Push Docker Image
    needs: set_env
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker-container
          buildkitd-flags: --debug

      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
      
      - name: Verify Docker Hub login
        run: |
          echo "Logged in as:"
          docker info | grep Username
          echo "Trying to push to: ${{ env.IMAGE_NAME }}"

      - name: Build and Push Docker Image
        id: push
        uses: docker/build-push-action@v5
        with:
          context: frontend/
          file: frontend/Dockerfile
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:${{ needs.set_env.outputs.image_tag }}
            ${{ env.IMAGE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDKIT_PROGRESS=plain  # Detailed build logs
        env:
          DOCKER_BUILDKIT: 1

      - name: Verify Push Success
        run: |
          echo "Pushed image: ${{ env.IMAGE_NAME }}:${{ needs.set_env.outputs.image_tag }}"
          docker pull ${{ env.IMAGE_NAME }}:${{ needs.set_env.outputs.image_tag }} || echo "Pull test failed"

trivy_scan:
  name: üîç Trivy Security Scan
  needs: docker_build_push
  runs-on: ubuntu-latest
  env:
    IMAGE_NAME: ${{ needs.set_env.outputs.image_name }}
    IMAGE_TAG: ${{ needs.set_env.outputs.image_tag }}
  steps:
    - name: Install Trivy with DB download
      run: |
        curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sudo sh -s -- -b /usr/local/bin
        trivy --version
        trivy image --download-db-only

    - name: Verify Docker image exists
      run: |
        echo "Attempting to pull image: $IMAGE_NAME:$IMAGE_TAG"
        docker pull $IMAGE_NAME:$IMAGE_TAG || (echo "ERROR: Failed to pull image"; exit 1)
        echo "Image exists and is accessible"

    - name: Verify image name and tag
      run: |
        echo "Scanning image: $IMAGE_NAME:$IMAGE_TAG"
        if [ -z "$IMAGE_NAME" ] || [ -z "$IMAGE_TAG" ]; then
          echo "ERROR: Image name or tag is empty!"
          exit 1
        fi

    - name: Scan Docker Image
      run: |
        trivy image \
          --scanners vuln \
          --format table \
          --exit-code 0 \
          --timeout 10m \
          "$IMAGE_NAME:$IMAGE_TAG"

    - name: Generate JSON Report
      run: |
        trivy image \
          --scanners vuln \
          --format json \
          --output trivy-report.json \
          --timeout 10m \
          "$IMAGE_NAME:$IMAGE_TAG"

    - name: Upload Scan Report
      uses: actions/upload-artifact@v4
      with:
        name: trivy-security-report
        path: trivy-report.json

  # remediation:
  #   name: üîß Automated Remediation
  #   needs: [set_env, trivy-scan]
  #   if: needs.trivy-scan.outputs.vulns != '0'
  #   runs-on: ubuntu-latest
  #   env:
  #     BRANCH: ${{ needs.set_env.outputs.checkout_branch }}
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4
  #       with:
  #         ref: ${{ env.BRANCH }}

  #     - name: Run remediation script
  #       run: |
  #         chmod +x .github/scripts/remediate.sh
  #         ./.github/scripts/remediate.sh

  #     - name: Commit & push fixes
  #       run: |
  #         git config user.name "github-actions[bot]"
  #         git config user.email "github-actions[bot]@users.noreply.github.com"
  #         git add frontend/Dockerfile package.json requirements.txt || true
  #         git commit -m "Automated remediation fixes" || echo "No changes to commit"
  #         git push origin $BRANCH

  # Uncomment and modify these deployment jobs as needed
  # ccli_hydra_e1_deployment:
  #   name: üöÄüü° Deploy image to E1 Hydra
  #   needs: [set_env, ace-build, trivy-scan]
  #   uses: amex-eng/ace-platform-reusable-workflow/.github/workflows/deploy_to_hydra_ccli_validate.yml@main
  #   with:
  #     image_name_ccli: artifactory.aexp.com/dockerproxy/${{ needs.set_env.outputs.image_name }}
  #     sha256: ${{ needs.ace-build.outputs.pushed_image }}
  #     regions: US
  #     env: "E1"
  #     project: ${{ vars.PROJECT }}
  #     service: ${{ vars.SERVICE }}
  #     image_time_stamp: ${{ needs.set_env.outputs.image_tag }}
  #   secrets:
  #     SE_USERNAME: ${{ secrets.SE_USERNAME }}
  #     SE_PASSWORD: ${{ secrets.SE_PASSWORD }}
  #     ARTIFACTORY_USERNAME: ${{ secrets.ARTIFACTORY_USERNAME }}
  #     ARTIFACTORY_PASSWORD: ${{ secrets.ARTIFACTORY_PASSWORD }}

  # ccli_hydra_e2_deployment:
  #   name: üöÄüü† Deploy image to E2 Hydra
  #   needs: [set_env, ace-build, trivy-scan, ccli_hydra_e1_deployment]
  #   uses: amex-eng/ace-platform-reusable-workflow/.github/workflows/deploy_to_hydra_ccli_validate.yml@main
  #   with:
  #     image_name_ccli: artifactory.aexp.com/dockerproxy/${{ needs.set_env.outputs.image_name }}
  #     sha256: ${{ needs.ace-build.outputs.pushed_image }}
  #     regions: US
  #     env: "E2"
  #     project: ${{ vars.PROJECT }}
  #     service: ${{ vars.SERVICE }}
  #     image_time_stamp: ${{ needs.set_env.outputs.image_tag }}
  #   secrets:
  #     SE_USERNAME: ${{ secrets.SE_USERNAME }}
  #     SE_PASSWORD: ${{ secrets.SE_PASSWORD }}
  #     ARTIFACTORY_USERNAME: ${{ secrets.ARTIFACTORY_USERNAME }}
  #     ARTIFACTORY_PASSWORD: ${{ secrets.ARTIFACTORY_PASSWORD }}
