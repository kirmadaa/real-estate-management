name: Automated Vulnerability Remediation

on:
  push:
    branches:
      - main
  schedule:
    # Run at 00:00 UTC daily
    - cron: '0 0 * * *'
  workflow_dispatch: # Allows manual trigger

env:
  IMAGE_NAME: my-python-app
  TRIVY_REPORT_PATH: trivy-report.json

jobs:
  scan-and-remediate:
    runs-on: ubuntu-latest
    permissions:
      contents: write # To push changes and open PRs
      pull-requests: write # To create pull requests

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Required for Git operations by the Python script

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install Python dependencies
        run: pip install requests # For Slack notifications and GitHub API calls

      - name: Build Docker Image
        run: docker build -t ${{ env.IMAGE_NAME }}:latest .

      - name: Run Trivy Scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.IMAGE_NAME }}:latest
          format: json
          output: ${{ env.TRIVY_REPORT_PATH }}
          exit-code: 0 # Do not fail the workflow on vulnerabilities, we want to remediate

      - name: Run Remediation Script
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }} # Optional: If you want Slack notifications
        run: python remediate_vulnerabilities.py

  # This job runs on the PR created by the remediation script to validate fixes
  validate-remediation:
    # if: github.event_name == 'pull_request' && startsWith(github.head_ref, 'security/auto-remediate-')
    runs-on: ubuntu-latest
    needs: scan-and-remediate
    permissions:
      contents: read

    steps:
      - name: Checkout PR Branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }} # Checkout the PR branch

      - name: Build Docker Image from PR Branch
        run: docker build -t ${{ env.IMAGE_NAME }}:pr-${{ github.event.pull_request.head.sha }} .

      - name: Re-scan Image with Trivy (Validation)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.IMAGE_NAME }}:pr-${{ github.event.pull_request.head.sha }}
          format: table # Use table for human readability in logs
          exit-code: 0 # Allow the scan to complete even if vulnerabilities exist
          severity: HIGH,CRITICAL # Only report critical and high for validation

      - name: Check for remaining high/critical vulnerabilities
        run: |
          # Re-run Trivy, but this time, fail if high/critical vulnerabilities are found.
          # This ensures the PR doesn't get merged if the fix wasn't effective.
          echo "Running final Trivy check with exit-code 1 for High/Critical..."
          docker build -t ${{ env.IMAGE_NAME }}:final-check .
          trivy image --exit-code 1 --severity HIGH,CRITICAL ${{ env.IMAGE_NAME }}:final-check
          echo "No High/Critical vulnerabilities found after remediation. PR is ready."
