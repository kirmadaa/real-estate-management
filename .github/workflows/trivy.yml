name: TaskApi - Docker Build, Push, and Security Scan

on:
  workflow_dispatch:
  push: # Trigger on push to main/master for automated fixes
    branches:
      - main
      - master

env:
  IMAGE_NAME: kirmadadaa/taskapi-frontend # Ensures correct formatting
  # Define the paths for your Dockerfile and application root here
  DEFAULT_APP_DOCKERFILE_PATH: frontend/Dockerfile
  DEFAULT_APP_ROOT_DIRECTORY: frontend/

jobs:
  set_env:
    name: 🛠 Set Variables
    runs-on: ubuntu-latest
    outputs:
      image_name: ${{ steps.setvars.outputs.image_name }}
      image_tag: ${{ steps.setvars.outputs.image_tag }}
      checkout_branch: ${{ steps.setvars.outputs.checkout_branch }}
      run_id: ${{ github.run_id }} # Pass run ID for artifact download
      app_dockerfile_path: ${{ steps.setvars.outputs.app_dockerfile_path }}
      app_root_directory: ${{ steps.setvars.outputs.app_root_directory }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set environment variables
        id: setvars
        run: |
          echo "image_name=${{ env.IMAGE_NAME }}" >> $GITHUB_OUTPUT
          echo "image_tag=${GITHUB_SHA::8}" >> $GITHUB_OUTPUT
          echo "checkout_branch=${GITHUB_REF#refs/heads/}" >> $GITHUB_OUTPUT
          echo "run_id=${GITHUB_RUN_ID}" >> $GITHUB_OUTPUT # Capture run ID
          echo "app_dockerfile_path=${{ env.DEFAULT_APP_DOCKERFILE_PATH }}" >> $GITHUB_OUTPUT
          echo "app_root_directory=${{ env.DEFAULT_APP_ROOT_DIRECTORY }}" >> $GITHUB_OUTPUT

  docker_build_push:
    name: 🐳 Build and Push Docker Image
    needs: set_env
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker-container
          buildkitd-flags: --debug

      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Verify Docker Hub login
        run: |
          echo "Logged in as:"
          docker info | grep Username
          echo "Trying to push to: ${{ env.IMAGE_NAME }}"

      - name: Build and Push Docker Image
        id: push
        uses: docker/build-push-action@v5
        with:
          context: ${{ needs.set_env.outputs.app_root_directory }}
          file: ${{ needs.set_env.outputs.app_dockerfile_path }}
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:${{ needs.set_env.outputs.image_tag }}
            ${{ env.IMAGE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDKIT_PROGRESS=plain
        env:
          DOCKER_BUILDKIT: 1

      - name: Verify Push Success
        run: |
          echo "Pushed image: ${{ env.IMAGE_NAME }}:${{ needs.set_env.outputs.image_tag }}"
          docker pull ${{ env.IMAGE_NAME }}:${{ needs.set_env.outputs.image_tag }} || echo "Pull test failed"

  trivy_scan:
    name: 🔍 Trivy Security Scan (Initial)
    needs: [set_env, docker_build_push]
    runs-on: ubuntu-latest
    outputs:
      vulnerabilities_found: ${{ steps.generate_json_report.outputs.found }}
    steps:
      - name: Set image variables
        id: vars
        run: |
          echo "IMAGE_NAME=${{ needs.set_env.outputs.image_name }}" >> $GITHUB_ENV
          echo "IMAGE_TAG=${{ needs.set_env.outputs.image_tag }}" >> $GITHUB_ENV
          echo "Set IMAGE_NAME=${{ needs.set_env.outputs.image_name }}"
          echo "Set IMAGE_TAG=${{ needs.set_env.outputs.image_tag }}"

      - name: Install Trivy
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sudo sh -s -- -b /usr/local/bin
          trivy --version

      - name: Verify variables
        run: |
          echo "Image to scan: ${IMAGE_NAME}:${IMAGE_TAG}"
          if [ -z "${IMAGE_NAME}" ] || [ -z "${IMAGE_TAG}" ]; then
            echo "ERROR: Image name or tag is empty!"
            exit 1
          fi

      - name: Pull Docker image
        run: |
          docker pull ${IMAGE_NAME}:${IMAGE_TAG} || (echo "ERROR: Failed to pull image"; exit 1)

      - name: Scan with Trivy (Table format for logs)
        run: |
          trivy image \
            --scanners vuln \
            --format table \
            --exit-code 0 \
            --timeout 10m \
            "${IMAGE_NAME}:${IMAGE_TAG}"

      - name: Generate JSON report
        id: generate_json_report
        run: |
          trivy image \
            --scanners vuln \
            --format json \
            --output trivy-report.json \
            "${IMAGE_NAME}:${IMAGE_TAG}"

          # Check if the report contains any vulnerabilities
          if jq -e '.[] | select(.Vulnerabilities != null and .Vulnerabilities | length > 0)' trivy-report.json > /dev/null; then
            echo "Vulnerabilities found!"
            echo "found=true" >> $GITHUB_OUTPUT
          else
            echo "No vulnerabilities found in this scan."
            echo "found=false" >> $GITHUB_OUTPUT
          fi

      - name: Upload initial report
        uses: actions/upload-artifact@v4
        with:
          name: trivy-security-report
          path: trivy-report.json

  remediation:
    name: 🔧 Automated Remediation
    needs: [set_env, trivy_scan]
    # Only run if vulnerabilities were found by the initial scan or if you want to try hardening anyway
    if: needs.trivy_scan.outputs.vulnerabilities_found == 'true' || always()
    runs-on: ubuntu-latest
    outputs:
      remediation_validation_status: ${{ steps.validation_scan.outputs.remediation_validation }}
      remediated_image_tag: ${{ steps.read_remediated_image_tag.outputs.tag }} # Output the remediated tag
    env:
      BRANCH: ${{ needs.set_env.outputs.checkout_branch }}
      RUN_ID: ${{ needs.set_env.outputs.run_id }}
      IMAGE_NAME: ${{ needs.set_env.outputs.image_name }} # Base name for new images
      # --- Pass these dynamic paths as ENVIRONMENT VARIABLES for the script ---
      TRIVY_REPORT_PATH: trivy-report.json # This file is downloaded to current directory
      DOCKERFILE_PATH: ${{ needs.set_env.outputs.app_dockerfile_path }}
      APP_ROOT_DIR: ${{ needs.set_env.outputs.app_root_directory }}
      # --- END FIX ---
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ env.BRANCH }}
          # The auto-commit action needs push permissions
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install JQ for JSON parsing (for workflow steps, script uses python json)
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Install Trivy (for re-validation within script)
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sudo sh -s -- -b /usr/local/bin
          trivy --version

      - name: Install npm (if needed for Node.js projects)
        run: |
          if [ -f "${{ env.APP_ROOT_DIR }}/package.json" ]; then
            echo "package.json detected. Installing npm."
            sudo apt-get install -y npm
          else
            echo "package.json not detected in ${{ env.APP_ROOT_DIR }}. Skipping npm installation."
          fi

      - name: Set up Go (if needed for Go projects)
        run: |
          if [ -f "${{ env.APP_ROOT_DIR }}/go.mod" ]; then
            echo "go.mod detected. Setting up Go."
            curl -LO https://go.dev/dl/go1.22.4.linux-amd64.tar.gz
            sudo tar -C /usr/local -xzf go1.22.4.linux-amd64.tar.gz
            echo "/usr/local/go/bin" >> $GITHUB_PATH
            go version
          else
            echo "go.mod not detected in ${{ env.APP_ROOT_DIR }}. Skipping Go installation."
          fi

      - name: Set up Ruby (if needed for Ruby projects)
        run: |
          if [ -f "${{ env.APP_ROOT_DIR }}/Gemfile" ] || [ -f "${{ env.APP_ROOT_DIR }}/Gemfile.lock" ]; then
            echo "Gemfile detected. Setting up Ruby."
            sudo apt-get install -y ruby-full
            gem install bundler
            ruby --version
            bundle --version
          else
            echo "Gemfile not detected in ${{ env.APP_ROOT_DIR }}. Skipping Ruby installation."
          fi

      - name: Download Trivy report artifact
        uses: actions/download-artifact@v4
        with:
          name: trivy-security-report
          path: . # Downloads trivy-report.json to the current directory

      - name: Make remediation script executable
        run: chmod +x .github/scripts/reditest.py

      - name: Run remediation script
        id: run_remediation
        # The Python script will read its inputs from environment variables
        run: python .github/scripts/reditest.py

      - name: Check for changes after remediation script
        id: git_status_check
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add .
          if ! git diff --cached --quiet; then
            echo "changes_made=true" >> $GITHUB_OUTPUT
            echo "Repository changes detected after remediation script execution."
          else
            echo "changes_made=false" >> $GITHUB_OUTPUT
            echo "No changes detected after remediation script execution."
          fi

      - name: Commit & push fixes (if changes detected by script)
        if: steps.git_status_check.outputs.changes_made == 'true'
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "feat(security): Automated vulnerability remediation by Trivy report"
          branch: ${{ env.BRANCH }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Read remediated image tag
        id: read_remediated_image_tag
        if: steps.git_status_check.outputs.changes_made == 'true'
        run: |
          # The script writes the remediated tag to this file
          if [ -f "remediated_image_tag.txt" ]; then
            REMEDIATED_TAG=$(cat remediated_image_tag.txt)
            echo "Found remediated image tag: $REMEDIATED_TAG"
            echo "tag=$REMEDIATED_TAG" >> $GITHUB_OUTPUT
          else
            echo "remediated_image_tag.txt not found. Cannot determine remediated image tag."
            echo "tag=unknown" >> $GITHUB_OUTPUT
          fi

      - name: Re-scan to Validate Fixes
        id: validation_scan
        if: steps.git_status_check.outputs.changes_made == 'true' && steps.read_remediated_image_tag.outputs.tag != 'unknown'
        run: |
          echo "Running final Trivy re-scan on the remediated image for validation."
          REMEDIATED_REPORT_PATH="trivy-remediated-scan-report.json" # As generated by the python script

          if [ -f "$REMEDIATED_REPORT_PATH" ]; then
              echo "Analyzing the remediation script's re-scan report: $REMEDIATED_REPORT_PATH"
              if jq -e '.[] | select(.Vulnerabilities != null and .Vulnerabilities | length > 0 and (.Vulnerabilities[] | select(.Severity == "CRITICAL" or .Severity == "HIGH")))' "$REMEDIATED_REPORT_PATH" > /dev/null; then
                echo "Vulnerabilities still present (Critical/High) after remediation. Manual review needed."
                echo "remediation_validation=failure" >> $GITHUB_OUTPUT
                exit 1 # Fail the step if critical/high vulns remain
              else
                echo "Image is clean of Critical/High vulnerabilities after remediation. Great success!"
                echo "remediation_validation=success" >> $GITHUB_OUTPUT
              fi
          else
              echo "Remediated scan report '$REMEDIATED_REPORT_PATH' not found. Cannot validate fixes."
              echo "remediation_validation=unknown" >> $GITHUB_OUTPUT
              exit 1 # Fail if report not found for validation
          fi

      - name: Upload remediated report artifact (if generated)
        if: steps.git_status_check.outputs.changes_made == 'true' && always() # Always attempt to upload if remediation ran
        uses: actions/upload-artifact@v4
        with:
          name: trivy-remediated-security-report
          path: trivy-remediated-scan-report.json # Path written by reditest.py
