name: TaskApi - E1 → E2 US Hydra with Trivy Remediation v2

on:
  workflow_dispatch:

env:
  DOCKER_HUB_USERNAME: kiramdadaa
  IMAGE_NAME: kiramdadaa/taskapi-frontend  # Must include username

jobs:
  set_env:
    name: 🛠 Set Variables
    runs-on: ubuntu-latest
    outputs:
      image_name: ${{ steps.setvars.outputs.image_name }}
      image_tag: ${{ steps.setvars.outputs.image_tag }}
      checkout_branch: ${{ steps.setvars.outputs.checkout_branch }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set environment variables
        id: setvars
        run: |
          echo "image_name=${{ env.IMAGE_NAME }}" >> $GITHUB_OUTPUT
          echo "image_tag=${{ github.sha }}" >> $GITHUB_OUTPUT
          echo "checkout_branch=${GITHUB_REF#refs/heads/}" >> $GITHUB_OUTPUT

  ace-build:
    name: 🐳 Build and Push Docker Image
    needs: set_env
    runs-on: ubuntu-latest
    outputs:
      pushed_image: ${{ steps.push.outputs.image }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker-container
          buildkitd-flags: --debug

      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Build and Push Docker Image
        id: push
        uses: docker/build-push-action@v5
        with:
          context: frontend/
          file: frontend/Dockerfile
          push: false
          tags: |
            ${{ env.IMAGE_NAME }}:${{ needs.set_env.outputs.image_tag }}
            ${{ env.IMAGE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
        env:
          DOCKER_BUILDKIT: 1

      - name: Set output
        run: |
          echo "image=${{ env.IMAGE_NAME }}:${{ needs.set_env.outputs.image_tag }}" >> $GITHUB_OUTPUT

  trivy-scan:
    name: 🔍 Trivy Scan
    needs: ace-build
    runs-on: ubuntu-latest
    outputs:
      vulns: ${{ steps.parse.outputs.vulns }}
    env:
      IMAGE: ${{ needs.ace-build.outputs.pushed_image }}
      SCAN_REPORT: trivy-report.json
    steps:
      - name: Install Trivy and jq
        run: |
          sudo apt-get update && sudo apt-get install -y jq
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sudo sh -s -- -b /usr/local/bin latest
          trivy --version

      - name: Run Trivy scan
        id: scan
        run: |
          echo "Scanning image: $IMAGE"
          # First try to pull the image if not exists locally
          docker pull $IMAGE || true
          
          # Run scan with timeout
          timeout 300 trivy image --security-checks vuln --format json --output $SCAN_REPORT --timeout 10m $IMAGE || true
          
          # Verify report exists and is valid
          if [ ! -f "$SCAN_REPORT" ]; then
            echo '{"Results": []}' > $SCAN_REPORT
          fi
          
          # Debug output
          echo "Scan report info:"
          ls -lah $SCAN_REPORT
          echo "First 100 chars:"
          head -c 100 $SCAN_REPORT || true

      - name: Parse vulnerabilities
        id: parse
        run: |
          # Ensure valid JSON
          if ! jq -e . $SCAN_REPORT >/dev/null 2>&1; then
            echo "Invalid JSON report, defaulting to 0 vulnerabilities"
            echo "vulns=0" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Count vulnerabilities safely
          count=$(jq '[.Results[].Vulnerabilities[]?] | length' $SCAN_REPORT 2>/dev/null || echo "0")
          echo "Found $count vulnerabilities"
          echo "vulns=$count" >> $GITHUB_OUTPUT

      - name: Upload Trivy report
        uses: actions/upload-artifact@v4
        with:
          name: trivy-report
          path: $SCAN_REPORT
          if-no-files-found: warn

# ... [rest of your pipeline including remediation and deployment jobs]

  # remediation:
  #   name: 🔧 Automated Remediation
  #   needs: [set_env, trivy-scan]
  #   if: needs.trivy-scan.outputs.vulns != '0'
  #   runs-on: ubuntu-latest
  #   env:
  #     BRANCH: ${{ needs.set_env.outputs.checkout_branch }}
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4
  #       with:
  #         ref: ${{ env.BRANCH }}

  #     - name: Run remediation script
  #       run: |
  #         chmod +x .github/scripts/remediate.sh
  #         ./.github/scripts/remediate.sh

  #     - name: Commit & push fixes
  #       run: |
  #         git config user.name "github-actions[bot]"
  #         git config user.email "github-actions[bot]@users.noreply.github.com"
  #         git add frontend/Dockerfile package.json requirements.txt || true
  #         git commit -m "Automated remediation fixes" || echo "No changes to commit"
  #         git push origin $BRANCH

  # Uncomment and modify these deployment jobs as needed
  # ccli_hydra_e1_deployment:
  #   name: 🚀🟡 Deploy image to E1 Hydra
  #   needs: [set_env, ace-build, trivy-scan]
  #   uses: amex-eng/ace-platform-reusable-workflow/.github/workflows/deploy_to_hydra_ccli_validate.yml@main
  #   with:
  #     image_name_ccli: artifactory.aexp.com/dockerproxy/${{ needs.set_env.outputs.image_name }}
  #     sha256: ${{ needs.ace-build.outputs.pushed_image }}
  #     regions: US
  #     env: "E1"
  #     project: ${{ vars.PROJECT }}
  #     service: ${{ vars.SERVICE }}
  #     image_time_stamp: ${{ needs.set_env.outputs.image_tag }}
  #   secrets:
  #     SE_USERNAME: ${{ secrets.SE_USERNAME }}
  #     SE_PASSWORD: ${{ secrets.SE_PASSWORD }}
  #     ARTIFACTORY_USERNAME: ${{ secrets.ARTIFACTORY_USERNAME }}
  #     ARTIFACTORY_PASSWORD: ${{ secrets.ARTIFACTORY_PASSWORD }}

  # ccli_hydra_e2_deployment:
  #   name: 🚀🟠 Deploy image to E2 Hydra
  #   needs: [set_env, ace-build, trivy-scan, ccli_hydra_e1_deployment]
  #   uses: amex-eng/ace-platform-reusable-workflow/.github/workflows/deploy_to_hydra_ccli_validate.yml@main
  #   with:
  #     image_name_ccli: artifactory.aexp.com/dockerproxy/${{ needs.set_env.outputs.image_name }}
  #     sha256: ${{ needs.ace-build.outputs.pushed_image }}
  #     regions: US
  #     env: "E2"
  #     project: ${{ vars.PROJECT }}
  #     service: ${{ vars.SERVICE }}
  #     image_time_stamp: ${{ needs.set_env.outputs.image_tag }}
  #   secrets:
  #     SE_USERNAME: ${{ secrets.SE_USERNAME }}
  #     SE_PASSWORD: ${{ secrets.SE_PASSWORD }}
  #     ARTIFACTORY_USERNAME: ${{ secrets.ARTIFACTORY_USERNAME }}
  #     ARTIFACTORY_PASSWORD: ${{ secrets.ARTIFACTORY_PASSWORD }}
